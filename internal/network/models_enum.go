// Code generated by go-enum DO NOT EDIT.
// Version:
// Revision:
// Build Date:
// Built By:

package network

import (
	"errors"
	"fmt"
)

const (
	// SignalTypeDoVerify is a signalType of type DoVerify.
	SignalTypeDoVerify signalType = "DoVerify"
	// SignalTypeProvidePubKey is a signalType of type ProvidePubKey.
	SignalTypeProvidePubKey signalType = "ProvidePubKey"
	// SignalTypePubKeyProvided is a signalType of type PubKeyProvided.
	SignalTypePubKeyProvided signalType = "PubKeyProvided"
	// SignalTypeSolveChallenge is a signalType of type SolveChallenge.
	SignalTypeSolveChallenge signalType = "SolveChallenge"
	// SignalTypeTestChallenge is a signalType of type TestChallenge.
	SignalTypeTestChallenge signalType = "TestChallenge"
	// SignalTypeNewConnection is a signalType of type NewConnection.
	SignalTypeNewConnection signalType = "NewConnection"
	// SignalTypeGenerateConnectionSign is a signalType of type GenerateConnectionSign.
	SignalTypeGenerateConnectionSign signalType = "GenerateConnectionSign"
	// SignalTypeSendConnectionSign is a signalType of type SendConnectionSign.
	SignalTypeSendConnectionSign signalType = "SendConnectionSign"
	// SignalTypeMakeOffer is a signalType of type MakeOffer.
	SignalTypeMakeOffer signalType = "MakeOffer"
	// SignalTypeSendOffer is a signalType of type SendOffer.
	SignalTypeSendOffer signalType = "SendOffer"
	// SignalTypeHandleOffer is a signalType of type HandleOffer.
	SignalTypeHandleOffer signalType = "HandleOffer"
	// SignalTypeSendAnswer is a signalType of type SendAnswer.
	SignalTypeSendAnswer signalType = "SendAnswer"
	// SignalTypeHandleAnswer is a signalType of type HandleAnswer.
	SignalTypeHandleAnswer signalType = "HandleAnswer"
	// SignalTypeConnectionEstablished is a signalType of type ConnectionEstablished.
	SignalTypeConnectionEstablished signalType = "ConnectionEstablished"
	// SignalTypePing is a signalType of type Ping.
	SignalTypePing signalType = "Ping"
	// SignalTypePong is a signalType of type Pong.
	SignalTypePong signalType = "Pong"
	// SignalTypeDisconnectCandidate is a signalType of type DisconnectCandidate.
	SignalTypeDisconnectCandidate signalType = "DisconnectCandidate"
)

var ErrInvalidsignalType = errors.New("not a valid signalType")

// String implements the Stringer interface.
func (x signalType) String() string {
	return string(x)
}

// IsValid provides a quick way to determine if the typed value is
// part of the allowed enumerated values
func (x signalType) IsValid() bool {
	_, err := ParsesignalType(string(x))
	return err == nil
}

var _signalTypeValue = map[string]signalType{
	"DoVerify":               SignalTypeDoVerify,
	"ProvidePubKey":          SignalTypeProvidePubKey,
	"PubKeyProvided":         SignalTypePubKeyProvided,
	"SolveChallenge":         SignalTypeSolveChallenge,
	"TestChallenge":          SignalTypeTestChallenge,
	"NewConnection":          SignalTypeNewConnection,
	"GenerateConnectionSign": SignalTypeGenerateConnectionSign,
	"SendConnectionSign":     SignalTypeSendConnectionSign,
	"MakeOffer":              SignalTypeMakeOffer,
	"SendOffer":              SignalTypeSendOffer,
	"HandleOffer":            SignalTypeHandleOffer,
	"SendAnswer":             SignalTypeSendAnswer,
	"HandleAnswer":           SignalTypeHandleAnswer,
	"ConnectionEstablished":  SignalTypeConnectionEstablished,
	"Ping":                   SignalTypePing,
	"Pong":                   SignalTypePong,
	"DisconnectCandidate":    SignalTypeDisconnectCandidate,
}

// ParsesignalType attempts to convert a string to a signalType.
func ParsesignalType(name string) (signalType, error) {
	if x, ok := _signalTypeValue[name]; ok {
		return x, nil
	}
	return signalType(""), fmt.Errorf("%s is %w", name, ErrInvalidsignalType)
}

// MarshalText implements the text marshaller method.
func (x signalType) MarshalText() ([]byte, error) {
	return []byte(string(x)), nil
}

// UnmarshalText implements the text unmarshaller method.
func (x *signalType) UnmarshalText(text []byte) error {
	tmp, err := ParsesignalType(string(text))
	if err != nil {
		return err
	}
	*x = tmp
	return nil
}
